[
  {
    "heading": "Excellent",
    "review": "I recently visited Emma’s at-home salon for a cut and colour, and it was an incredible experience.\n\nFrom the start, Emma made me feel completely comfortable, creating a warm and welcoming atmosphere. She listened carefully to the style I wanted and never made me feel like I was asking too much, even with my request for a more time-consuming colour trend!\n\nThe results were absolutely beautiful, exactly as I envisioned. Emma’s patience, attention to detail, and professionalism truly set her apart. I will definitely be returning and highly recommend her services!",
    "name": "Test Name",
    "date": "14/10/2024",
    "avatar": "avatar_e.png",
    "image1": "hair_back_brown.jpg",
    "image2": "hair_back_brown.jpg",
    "image3": "hair_back_brown.jpg",
    "image4": "hair_back_brown.jpg"
  },
  {
    "heading": "Excellent",
    "review": "I recently visited Emma’s at-home salon for a cut and colour, and it was an incredible experience.\n\nFrom the start, Emma made me feel completely comfortable, creating a warm and welcoming atmosphere. She listened carefully to the style I wanted and never made me feel like I was asking too much, even with my request for a more time-consuming colour trend!\n\nThe results were absolutely beautiful, exactly as I envisioned. Emma’s patience, attention to detail, and professionalism truly set her apart. I will definitely be returning and highly recommend her services!",
    "name": "Ella Kehoe",
    "date": "14/10/2024",
    "image1": "hair_back_brown.jpg",
    "image2": "hair_back_brown.jpg",
    "image3": "hair_back_brown.jpg"
  },
  {
    "heading": "Excellent",
    "review": "I recently visited Emma’s at-home salon for a cut and colour, and it was an incredible experience.\n\nFrom the start, Emma made me feel completely comfortable, creating a warm and welcoming atmosphere. She listened carefully to the style I wanted and never made me feel like I was asking too much, even with my request for a more time-consuming colour trend!\n\nThe results were absolutely beautiful, exactly as I envisioned. Emma’s patience, attention to detail, and professionalism truly set her apart. I will definitely be returning and highly recommend her services!",
    "name": "Ella Kehoe",
    "date": "14/10/2024",
    "avatar": "avatar_e.png",
    "image1": "hair_back_brown.jpg"
  },
  {
    "heading": "Excellent",
    "review": "I recently visited Emma’s at-home salon for a cut and colour, and it was an incredible experience.\n\nFrom the start, Emma made me feel completely comfortable, creating a warm and welcoming atmosphere. She listened carefully to the style I wanted and never made me feel like I was asking too much, even with my request for a more time-consuming colour trend!\n\nThe results were absolutely beautiful, exactly as I envisioned. Emma’s patience, attention to detail, and professionalism truly set her apart. I will definitely be returning and highly recommend her services!",
    "name": "Ella Kehoe",
    "date": "14/10/2024"
  },
  {
    "heading": "Excellent",
    "review": "I recently visited Emma’s at-home salon for a cut and colour, and it was an incredible experience.\n\nFrom the start, Emma made me feel completely comfortable, creating a warm and welcoming atmosphere. She listened carefully to the style I wanted and never made me feel like I was asking too much, even with my request for a more time-consuming colour trend!\n\nThe results were absolutely beautiful, exactly as I envisioned. Emma’s patience, attention to detail, and professionalism truly set her apart. I will definitely be returning and highly recommend her services!",
    "name": "Ella Kehoe",
    "date": "14/10/2024",
    "avatar": "avatar_e.png",
    "image1": "hair_back_brown.jpg"
  },
  {
    "heading": "Excellent",
    "review": "I recently visited Emma’s at-home salon for a cut and colour, and it was an incredible experience.\n\nFrom the start, Emma made me feel completely comfortable, creating a warm and welcoming atmosphere. She listened carefully to the style I wanted and never made me feel like I was asking too much, even with my request for a more time-consuming colour trend!\n\nThe results were absolutely beautiful, exactly as I envisioned. Emma’s patience, attention to detail, and professionalism truly set her apart. I will definitely be returning and highly recommend her services!",
    "name": "Ella Kehoe",
    "date": "14/10/2024",
    "image1": "hair_back_brown.jpg",
    "image2": "hair_back_brown.jpg"
  },
  {
    "heading": "Excellent",
    "review": "I recently visited Emma’s at-home salon for a cut and colour, and it was an incredible experience.\n\nFrom the start, Emma made me feel completely comfortable, creating a warm and welcoming atmosphere. She listened carefully to the style I wanted and never made me feel like I was asking too much, even with my request for a more time-consuming colour trend!\n\nThe results were absolutely beautiful, exactly as I envisioned. Emma’s patience, attention to detail, and professionalism truly set her apart. I will definitely be returning and highly recommend her services!",
    "name": "Ella Kehoe",
    "date": "14/10/2024",
    "avatar": "avatar_e.png",
    "image1": "hair_back_brown.jpg",
    "image2": "hair_back_brown.jpg",
    "image3": "hair_back_brown.jpg",
    "image4": "hair_back_brown.jpg"
  }
]